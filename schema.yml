openapi: 3.0.3
info:
  title: devsearchproject API
  version: 1.0.0
  description: complete API for webapp
paths:
  /api/profiles/:
    get:
      operationId: api_profiles_list
      description: Return the list of all profiles registered in the webpage, paginate
        the results by 3
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProfileList'
          description: ''
  /api/profiles/{id}/:
    get:
      operationId: api_profiles_retrieve
      description: Return the all the public data for the profile whose id is sent
        through the endpoint
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
    put:
      operationId: api_profiles_update
      description: |-
        Update the data for the profile whose id sent only if the user is authenticated
        and is the owner of the profile
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Profile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Profile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
    patch:
      operationId: api_profiles_partial_update
      description: |-
        Update the data for the profile whose id sent only if the user is authenticated
        and is the owner of the profile
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
  /api/profiles/{id}/messages/:
    get:
      operationId: api_profiles_messages_list
      description: Return all messages received for the user authenticated
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
          description: ''
  /api/profiles/{id}/messages/{id}:
    get:
      operationId: api_profiles_messages_retrieve
      description: |-
        Return data for the message whose id is sent in the URL only if the user authenticated
        is the owner of the received message
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
    put:
      operationId: api_profiles_messages_update
      description: |-
        Updates data for the message whose id is sent in the URL only if the user authenticated
        is the owner of the received message
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Message'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Message'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
    patch:
      operationId: api_profiles_messages_partial_update
      description: |-
        Updates data for the message whose id is sent in the URL only if the user authenticated
        is the owner of the received message
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMessage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMessage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMessage'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
    delete:
      operationId: api_profiles_messages_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/profiles/{id}/skills/:
    get:
      operationId: api_profiles_skills_list
      description: |-
        Get the skills for the user id send through pk field and only if the user authenticated who send the request
        is the same as the user whose id is send, if the user doesn't have skills then a empty list is sent as a Response.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Skill'
          description: ''
    post:
      operationId: api_profiles_skills_create
      description: |-
        Create a skill for the user id send through pk field only if the user authenticated who send the request
        is the same as the user whose id is send

        return status code 201 when success
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Skill'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Skill'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Skill'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
          description: ''
  /api/profiles/{id}/skills/{id}/:
    get:
      operationId: api_profiles_skills_retrieve
      description: |-
        Retrieve the data from a specific skill whose is sent through the URL only if the
        user is authenticated and is owner of the skill
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
          description: ''
    put:
      operationId: api_profiles_skills_update
      description: |-
        Update the data for a specific skill whose is sent through the URL only if the
        user is authenticated and is owner of the skill
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Skill'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Skill'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Skill'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
          description: ''
    patch:
      operationId: api_profiles_skills_partial_update
      description: |-
        Update the data for a specific skill whose is sent through the URL only if the
        user is authenticated and is owner of the skill
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSkill'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSkill'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSkill'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
          description: ''
    delete:
      operationId: api_profiles_skills_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/projects/:
    get:
      operationId: api_projects_list
      description: Return list of all projects in database paginated through page
        number validation in the sent in URL, paginate the results by 3
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProjectList'
          description: ''
    post:
      operationId: api_projects_create
      description: Post a new project if the user is authenticated with the data received
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Project'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
  /api/projects/{id}/:
    get:
      operationId: api_projects_retrieve
      description: Retrieve the project data whose id is sent through the endpoint
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    put:
      operationId: api_projects_update
      description: Update a the project whose id is sent through the endpoint only
        if the authenticated user is the owner of the project
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Project'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    patch:
      operationId: api_projects_partial_update
      description: Update a the project whose id is sent through the endpoint only
        if the authenticated user is the owner of the project
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProject'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProject'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProject'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    delete:
      operationId: api_projects_destroy
      description: Delete a the project whose id is sent through the endpoint only
        if the authenticated user is the owner of the project
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/projects/{id}/review/:
    post:
      operationId: api_projects_review_create
      description: |-
        Create a review for a project whose id is sent in the URL and only if the user authenticated is not the owner
        of the project
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Review'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
  /api/projects/{id}/review/{id}/:
    get:
      operationId: api_projects_review_retrieve
      description: get the data from the review with the id send in URL
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    put:
      operationId: api_projects_review_update
      description: Update the review with the data send only if the user authenticated
        is the owner of the review
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Review'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    patch:
      operationId: api_projects_review_partial_update
      description: Update the review with the data send only if the user authenticated
        is the owner of the review
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedReview'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
  /api/sent-message/{id}/:
    post:
      operationId: api_sent_message_create
      description: Sents a message from the authenticated user to the user whose id
        is provided in the URL
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Message'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Message'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /api/users/login/:
    post:
      operationId: api_users_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/users/login/refresh/:
    post:
      operationId: api_users_login_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/users/logout/:
    post:
      operationId: api_users_logout_create
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/users/password-reset/:
    post:
      operationId: api_users_password_reset_create
      description: |-
        An Api View which provides a method to request a password reset token based on an e-mail address

        Sends a signal reset_password_token_created when a reset token was created
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Email'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Email'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
          description: ''
  /api/users/password-reset/confirm/:
    post:
      operationId: api_users_password_reset_confirm_create
      description: An Api View which provides a method to reset a password based on
        a unique token
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordToken'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordToken'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordToken'
          description: ''
  /api/users/password-reset/validate_token/:
    post:
      operationId: api_users_password_reset_validate_token_create
      description: An Api View which provides a method to verify that a token is valid
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetToken'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResetToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResetToken'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetToken'
          description: ''
  /api/users/register/:
    post:
      operationId: api_users_register_create
      description: |-
        Register a new user in the database and automatically creates a profile for him with the basic data
        sent to registration
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
components:
  schemas:
    Email:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        sender_name:
          type: string
          nullable: true
          maxLength: 200
        sender_email:
          type: string
          format: email
          nullable: true
          maxLength: 200
        subject:
          type: string
          maxLength: 200
        body:
          type: string
        is_read:
          type: boolean
          nullable: true
        created:
          type: string
          format: date-time
          readOnly: true
        sender:
          type: string
          format: uuid
          nullable: true
        recipient:
          type: string
          format: uuid
          nullable: true
      required:
      - body
      - created
      - id
      - subject
    PaginatedProfileList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Profile'
    PaginatedProjectList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Project'
    PasswordToken:
      type: object
      properties:
        password:
          type: string
        token:
          type: string
      required:
      - password
      - token
    PatchedMessage:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        sender_name:
          type: string
          nullable: true
          maxLength: 200
        sender_email:
          type: string
          format: email
          nullable: true
          maxLength: 200
        subject:
          type: string
          maxLength: 200
        body:
          type: string
        is_read:
          type: boolean
          nullable: true
        created:
          type: string
          format: date-time
          readOnly: true
        sender:
          type: string
          format: uuid
          nullable: true
        recipient:
          type: string
          format: uuid
          nullable: true
    PatchedProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        skills:
          type: string
          readOnly: true
        projects:
          type: string
          readOnly: true
        name:
          type: string
          nullable: true
          maxLength: 200
        email:
          type: string
          format: email
          nullable: true
          maxLength: 500
        username:
          type: string
          nullable: true
          maxLength: 200
        location:
          type: string
          nullable: true
          maxLength: 200
        short_intro:
          type: string
          nullable: true
          maxLength: 200
        bio:
          type: string
          nullable: true
        profile_image:
          type: string
          format: uri
          nullable: true
        social_github:
          type: string
          nullable: true
          maxLength: 200
        social_twitter:
          type: string
          nullable: true
          maxLength: 200
        social_linkedin:
          type: string
          nullable: true
          maxLength: 200
        social_youtube:
          type: string
          nullable: true
          maxLength: 200
        personal_website:
          type: string
          nullable: true
          maxLength: 200
        created:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
          nullable: true
    PatchedProject:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 200
        description:
          type: string
          nullable: true
        featured_image:
          type: string
          format: uri
          nullable: true
        demo_link:
          type: string
          nullable: true
          maxLength: 2000
        source_link:
          type: string
          nullable: true
          maxLength: 2000
        vote_total:
          type: integer
          nullable: true
        vote_ratio:
          type: integer
          nullable: true
        created:
          type: string
          format: date-time
          readOnly: true
        owner:
          type: string
          format: uuid
          nullable: true
        tags:
          type: array
          items:
            type: integer
    PatchedReview:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        body:
          type: string
          nullable: true
        value:
          $ref: '#/components/schemas/ValueEnum'
        created:
          type: string
          format: date-time
          readOnly: true
    PatchedSkill:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          nullable: true
          maxLength: 200
        description:
          type: string
          nullable: true
    Profile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        skills:
          type: string
          readOnly: true
        projects:
          type: string
          readOnly: true
        name:
          type: string
          nullable: true
          maxLength: 200
        email:
          type: string
          format: email
          nullable: true
          maxLength: 500
        username:
          type: string
          nullable: true
          maxLength: 200
        location:
          type: string
          nullable: true
          maxLength: 200
        short_intro:
          type: string
          nullable: true
          maxLength: 200
        bio:
          type: string
          nullable: true
        profile_image:
          type: string
          format: uri
          nullable: true
        social_github:
          type: string
          nullable: true
          maxLength: 200
        social_twitter:
          type: string
          nullable: true
          maxLength: 200
        social_linkedin:
          type: string
          nullable: true
          maxLength: 200
        social_youtube:
          type: string
          nullable: true
          maxLength: 200
        personal_website:
          type: string
          nullable: true
          maxLength: 200
        created:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
          nullable: true
      required:
      - created
      - id
      - projects
      - skills
    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 200
        description:
          type: string
          nullable: true
        featured_image:
          type: string
          format: uri
          nullable: true
        demo_link:
          type: string
          nullable: true
          maxLength: 2000
        source_link:
          type: string
          nullable: true
          maxLength: 2000
        vote_total:
          type: integer
          nullable: true
        vote_ratio:
          type: integer
          nullable: true
        created:
          type: string
          format: date-time
          readOnly: true
        owner:
          type: string
          format: uuid
          nullable: true
        tags:
          type: array
          items:
            type: integer
      required:
      - created
      - id
      - title
    ResetToken:
      type: object
      properties:
        token:
          type: string
      required:
      - token
    Review:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        body:
          type: string
          nullable: true
        value:
          $ref: '#/components/schemas/ValueEnum'
        created:
          type: string
          format: date-time
          readOnly: true
      required:
      - created
      - id
      - value
    Skill:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          nullable: true
          maxLength: 200
        description:
          type: string
          nullable: true
      required:
      - id
      - name
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        password:
          type: string
          maxLength: 128
        last_login:
          type: string
          format: date-time
          nullable: true
        is_superuser:
          type: boolean
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        is_staff:
          type: boolean
          title: Staff status
          description: Designates whether the user can log into this admin site.
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        date_joined:
          type: string
          format: date-time
        groups:
          type: array
          items:
            type: integer
          description: The groups this user belongs to. A user will get all permissions
            granted to each of their groups.
        user_permissions:
          type: array
          items:
            type: integer
          description: Specific permissions for this user.
      required:
      - email
      - id
      - password
      - username
    ValueEnum:
      enum:
      - up
      - down
      type: string
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
